public class TicketInfo {
    private String name;
    private int noOfTickets;
    private String coach;
    private String mobileNumber;
    private String insurance;

    public TicketInfo() {
        super();
    }

    public TicketInfo(String name, int noOfTickets, String coach, String mobileNumber, String insurance) {
        super();
        this.name = name;
        this.noOfTickets = noOfTickets;
        this.coach = coach;
        this.mobileNumber = mobileNumber;
        this.insurance = insurance;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getNoOfTickets() {
        return noOfTickets;
    }

    public void setNoOfTickets(int noOfTickets) {
        this.noOfTickets = noOfTickets;
    }

    public String getCoach() {
        return coach;
    }

    public void setCoach(String coach) {
        this.coach = coach;
    }

    public String getMobileNumber() {
        return mobileNumber;
    }

    public void setMobileNumber(String mobileNumber) {
        this.mobileNumber = mobileNumber;
    }

    public String getInsurance() {
        return insurance;
    }

    public void setInsurance(String insurance) {
        this.insurance = insurance;
    }

    //This method is used to calculate the total cost to be paid by the passenger
   public double calculateTicketCost() {
    double cost = 0;
    double gst = 0;
    double serviceCharge = 0.045; //4.5% service charge for all coaches
    double ticketCost = 0;

    //The cost and GST vary depending on the coach
    switch (coach.toLowerCase()) {
        case "firstac":
            cost = 2200;
            gst = 0.05; //5% GST for FirstAC
            break;
        case "secondac":
            cost = 1700;
            gst = 0.05; //5% GST for SecondAC
            break;
        case "thirdac":
            cost = 1200;
            gst = 0.04; //4% GST for ThirdAC
            break;
        case "sleeper":
            cost = 520;
            gst = 0.02; //2% GST for Sleeper
            break;
        case "unreserve":
            cost = 200;
            gst = 0; //No GST for Unreserve
            serviceCharge = 0; //No service charge for Unreserve
            break;
        default:
            return -1; //Invalid coach
    }

    //Formula to calculate ticket cost
    ticketCost = noOfTickets * (cost + (cost * gst) + (cost * serviceCharge));
    return ticketCost;
}


    //This method calculates the total booking cost to be paid by including the insurance charge (if required) with the ticket cost
    public double calculateTotalBookingCost() {
        double insuranceCharge = 49; //Insurance charge per person
        double totalCost = 0;
        double ticketCost = calculateTicketCost();

        //If the ticket cost is valid
        if (ticketCost != -1) {
            //If the insurance is required
            if (insurance.equalsIgnoreCase("yes")) {
                //Formula to calculate total booking cost with insurance
                totalCost = noOfTickets * (ticketCost + insuranceCharge);
            }
            //If the insurance is not required
            else if (insurance.equalsIgnoreCase("no")) {
                //Total booking cost is same as ticket cost
                totalCost = ticketCost;
            }
            //If the insurance is invalid
            else {
                return -1;
            }
        }
        //If the ticket cost is invalid
        else {
            return -1;
        }

        return totalCost;
    }
}

//UserInterface.java
import java.util.Scanner;

public class UserInterface {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the passenger details");
        String ticketDetails = sc.nextLine(); //Input format: name:noOfTickets:coach:mobileNumber:insurance
        TicketInfo ticketInfo = extractDetails(ticketDetails); //Extract the ticket details and create an object of TicketInfo class
        if (ticketInfo != null) {
            System.out.println("Passenger Details");
            System.out.println("Passenger Name: " + ticketInfo.getName());
            System.out.println("Number of Tickets: " + ticketInfo.getNoOfTickets());
            System.out.println("Coach: " + ticketInfo.getCoach());
            System.out.println("Mobile Number: " + ticketInfo.getMobileNumber());
            System.out.println("Insurance Required: " + ticketInfo.getInsurance());
            System.out.println("Total Booking Charge: Rs. " + ticketInfo.calculateTotalBookingCost());
        } else {
            System.out.println("Invalid input");
        }
        sc.close();
    }

    //This method accepts passenger details as an argument and extracts the properties of the TicketInfo from the argument
    public static TicketInfo extractDetails(String ticketDetails) {
        TicketInfo ticketInfo = null;
        String[] details = ticketDetails.split(":"); //Split the input by colon
        if (details.length == 5) { //If the input has 5 fields
            String name = details[0]; //First field is name
            int noOfTickets = Integer.parseInt(details[1]); //Second field is number of tickets
            String coach = details[2]; //Third field is coach
            String mobileNumber = details[3]; //Fourth field is mobile number
            String insurance = details[4]; //Fifth field is insurance
            ticketInfo = new TicketInfo(name, noOfTickets, coach, mobileNumber, insurance); //Create a new object of TicketInfo class with the extracted details
        }
        return ticketInfo;
    }
}
